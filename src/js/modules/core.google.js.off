Core.register(
    'Google',
    function(sandbox) {
        var module = {};
        var clientId = '638606683809-t4elhv222lo3e81sqcv4tuaem2ubind1.apps.googleusercontent.com';
        var appId = '638606683809';
        var apiKey = 'AIzaSyADMz_1H-mtIBn5LlEi32T1VL3CttdUYEo';
        var scopes = 'https://www.googleapis.com/auth/drive';
        var oauthToken;

        module.init = function() {
            $('body').append('<script src="js/google-api.js"></script>');
            $('#import-from-drive')
                .css('display', 'block')
                .on('click', module.handlePickerClick);
        };

        // Our first function is used to set the api key and
        // is run once the google api is loaded in the page header.
        module.handlePickerClick = function() {
            gapi.load('auth', {'callback': module.onAuthApiLoad});
            gapi.load('picker', {'callback': module.onPickerApiLoad});
        };

        // Gets the result after the authorization and if successful,
        // it makes the api call to get the  //user's information.
        module.handleAuthResult = function(authResult) {
            console.log('Handling authorization result for response:');
            console.log(authResult);
            if (authResult && !authResult.error) {
                oauthToken = authResult.access_token;
                module.createPicker();
                $('#google-login').hide();
            } else {
                console.log('Enabling Google button');
                $('#google-login').fadeIn().on('click', module.onAuthApiLoad);
            }
        };

        // Make api call on button click to authorize client
        module.onAuthApiLoad = function(event) {
            console.log('Handling authorization click for response:');
            console.log(event);
            gapi.auth.authorize(
                {
                    'client_id': clientId,
                    'scope': scopes,
                    'immediate': false
                },
                module.handleAuthResult
            );
        
            return false;
        };

        module.onPickerApiLoad = function() {
            pickerApiLoaded = true;
            module.createPicker();
        };

        // Create and render a Picker object for searching images.
        module.createPicker = function() {
            if (pickerApiLoaded && oauthToken) {
                var view = new google.picker.View(google.picker.ViewId.DOCS);
                view.setMimeTypes("application/vnd.google-apps.spreadsheet");
                var picker = new google.picker.PickerBuilder()
                    .enableFeature(google.picker.Feature.NAV_HIDDEN)
                    .setAppId(appId)
                    .setOAuthToken(oauthToken)
                    .addView(view)
                    .addView(new google.picker.DocsUploadView())
                    .setDeveloperKey(apiKey)
                    .setCallback(module.pickerCallback)
                    .build();
                picker.setVisible(true);
            }
        };

        // A simple callback implementation.
        module.pickerCallback = function(data) {
            if (data.action == google.picker.Action.PICKED) {
                var fileId = data.docs[0].id;
                gapi.load(
                    'client', {
                    'callback': function() {
                        module.requestFileExport(fileId);
                    }
                });
            }
        };

        module.requestFileExport = function(fileId) {
            console.log('Requesting file export for id ' + fileId);
            gapi.client.request(
                {
                    'path': '/drive/v3/files/' + fileId + '/export',
                    'method': 'GET',
                    'headers': {
                        'Authorization': 'Bearer ' + oauthToken
                    },
                    'params': {
                        'mimeType': 'text/csv'
                    }
                }
            ).execute(module.handleFileExport);
        };

        module.handleFileExport = function(response) {
            console.log('Handling file export for response:');
            console.log(response);
            if (response && !response.error) {
                // TODO: Put text into textarea
                module.showImportData(response.text);
            } else {
                $('#import-error .content')
                    .text(I18n.translate("importServerError", response.error.message));
                $('#import-error').fadeIn();
            }
        };

        return module;
    }
);
